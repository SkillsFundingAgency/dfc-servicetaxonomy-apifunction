{
  "query": "MATCH (jp:JobProfile{JobProfileWebsiteUrl:$canonicalName})-[:hasSocCode]->(soc:SOCCode), (jp)-[:relatedOccupation]-(oc:esco__Occupation) OPTIONAL MATCH (dtd:DayToDayTask)<-[:hasDayToDayTask]-(jp) WITH jp,soc,oc,{tasks:collect(dtd.skos__prefLabel)} as dayToDayTasks OPTIONAL MATCH (jp)-[:hasWorkingUniform]-(wu:WorkingUniform) OPTIONAL MATCH (jp)-[:hasWorkingEnvironment]-(we:WorkingEnvironment) OPTIONAL MATCH (jp)-[:hasWorkingLocation]-(wl:WorkingLocation) OPTIONAL MATCH (jp)-[:requiresHtbRegistration]-(re:Registration) WITH wu,we,wl,jp,soc,oc,dayToDayTasks, {values:collect('[' + re.skos__prefLabel + ' | ' + re.Description + ']'), modifiedDate:max(re.ModifiedDate)} as registration OPTIONAL MATCH (jp)-[:hasHtbUniversityRoute]-(ur:UniversityRoute), (ur)-[:hasRequirementsPrefix]-(upr:RequirementsPrefix) OPTIONAL MATCH (ur)-[:hasUniversityRequirement]-(urq:UniversityRequirement) WITH wu,we,wl,jp,soc,oc,ur,upr,dayToDayTasks,registration, {values:collect(urq.skos__prefLabel), modifiedDate:max(urq.ModifiedDate)} as universityRequirement OPTIONAL MATCH (ur)-[:hasUniversityLink]-(ul:UniversityLink) WITH wu,we,wl,jp,soc,oc,ur,upr,dayToDayTasks,registration,universityRequirement,{values:collect('[' + ul.Link_text + ' | ' + ul.Link_url + ']'), modifiedDate:max(ul.ModifiedDate)} as universityLinks OPTIONAL MATCH (jp)-[:hasHtbCollegeRoute]-(cr:CollegeRoute), (cr)-[:hasRequirementsPrefix]-(cpr:RequirementsPrefix) OPTIONAL MATCH (cr)-[:hasCollegeRequirement]-(crq:CollegeRequirement) WITH wu,we,wl,jp,soc,oc,ur,upr,dayToDayTasks,registration,universityRequirement,universityLinks,cr,cpr,{values:collect(crq.skos__prefLabel), modifiedDate:max(crq.ModifiedDate)} as collegeRequirement OPTIONAL MATCH (cr)-[:hasCollegeLink]-(cl:CollegeLink) WITH wu,we,wl,jp,soc,oc,ur,upr,dayToDayTasks,registration,universityRequirement,universityLinks,cr,cpr,collegeRequirement,{values:collect('[' + cl.Link_text + ' | ' + cl.Link_url + ']'), modifiedDate:max(cl.ModifiedDate)} as collegeLinks OPTIONAL MATCH (jp)-[:hasHtbApprenticeshipRoute]-(ar:ApprenticeshipRoute), (ar)-[:hasRequirementsPrefix]-(apr:RequirementsPrefix) OPTIONAL MATCH (ar)-[:hasApprenticeshipRequirement]-(arq:ApprenticeshipRequirement) WITH wu,we,wl,jp,soc,oc,ur,upr,dayToDayTasks,registration,universityRequirement,universityLinks,cr,cpr,collegeRequirement,collegeLinks,ar,apr,{values:collect(arq.skos__prefLabel), modifiedDate:max(arq.ModifiedDate)} as apprenticeshipRequirement OPTIONAL MATCH (ar)-[:hasApprenticeshipLink]-(al:ApprenticeshipLink) WITH wu,we,wl,jp,soc,oc,ur,upr,dayToDayTasks,registration,universityRequirement,universityLinks,cr,cpr,collegeRequirement,collegeLinks,ar,apr,apprenticeshipRequirement,{values:collect('[' + al.Link_text + ' | ' + al.Link_url + ']'), modifiedDate:max(al.ModifiedDate)} as apprenticeshipLinks OPTIONAL MATCH (jp)-[:hasHtbWorkRoute]-(wr:WorkRoute) WITH wu,we,wl,jp,soc,oc,ur,upr,dayToDayTasks,registration,universityRequirement,universityLinks,cr,cpr,collegeRequirement,collegeLinks,ar,apr,apprenticeshipRequirement,apprenticeshipLinks,{values:collect(wr.Description), modifiedDate:max(wr.ModifiedDate)} as workRoute OPTIONAL MATCH (jp)-[:hasHtbVolunteeringRoute]-(vr:VolunteeringRoute) WITH wu,we,wl,jp,soc,oc,ur,upr,dayToDayTasks,registration,universityRequirement,universityLinks,cr,cpr,collegeRequirement,collegeLinks,ar,apr,apprenticeshipRequirement,apprenticeshipLinks,workRoute,{values:collect(vr.Description), modifiedDate:max(vr.ModifiedDate)} as volunteeringRoute OPTIONAL MATCH (jp)-[:hasHtbDirectRoute]-(dr:DirectRoute) WITH wu,we,wl,jp,soc,oc,ur,upr,dayToDayTasks,registration,universityRequirement,universityLinks,cr,cpr,collegeRequirement,collegeLinks,ar,apr,apprenticeshipRequirement,apprenticeshipLinks,workRoute,volunteeringRoute, {values:collect(dr.Description), modifiedDate:max(dr.ModifiedDate)} as directRoute OPTIONAL MATCH (jp)-[:hasHtbOtherRoute]-(or:OtherRoute) WITH wu,we,wl,jp,soc,oc,ur,upr,dayToDayTasks,registration,universityRequirement,universityLinks,cr,cpr,collegeRequirement,collegeLinks,ar,apr,apprenticeshipRequirement,apprenticeshipLinks,workRoute,volunteeringRoute,directRoute,{values:collect(or.Description),modifiedDate:max(or.ModifiedDate)} as otherRoute OPTIONAL MATCH (jp)-[:hasWitOtherRequirement]-(oreq:OtherRequirement) WITH wu,we,wl,jp,soc,oc,ur,upr,dayToDayTasks,registration,universityRequirement,universityLinks,cr,cpr,collegeRequirement,collegeLinks,ar,apr,apprenticeshipRequirement,apprenticeshipLinks,workRoute,volunteeringRoute,directRoute,otherRoute,{values:collect(oreq.Description),modifiedDate:max(oreq.ModifiedDate)} as otherRequirements OPTIONAL MATCH (jp)-[:hasWitRestriction]-(res:Restriction) WITH wu,we,wl,jp,soc,oc,ur,upr,dayToDayTasks,registration,universityRequirement,universityLinks,cr,cpr,collegeRequirement,collegeLinks,ar,apr,apprenticeshipRequirement,apprenticeshipLinks,workRoute,volunteeringRoute,directRoute,otherRoute,otherRequirements,{values:collect(res.skos__prefLabel),modifiedDate:max(res.ModifiedDate)} as restrictions WITH wu,we,wl,jp,soc,oc, { lastModified:[jp.ModifiedDate, we.ModifiedDate, oc.ModifiedDate, wl.ModifiedDate, wu.ModifiedDate,ur.ModifiedDate,upr.ModifiedDate,universityLinks.ModifiedDate,universityRequirement.modifiedDate,collegeLinks.ModifiedDate,collegeRequirement.modifiedDate,apprenticeshipLinks.ModifiedDate,apprenticeshipRequirement.modifiedDate,workRoute.modifiedDate,volunteeringRoute.modifiedDate,directRoute.modifiedDate,otherRoute.modifiedDate,registration.modifiedDate, restrictions.modifiedDate, otherRequirements.modifiedDate], title: jp.skos__prefLabel, universityRoute:{ requirements:universityRequirement, requirementsPreface:upr.skos__prefLabel, relevantSubjects: CASE ur.RelevantSubjects WHEN '' THEN [] WHEN NULL THEN [] ELSE [ur.RelevantSubjects] END, furtherInfo:CASE ur.FurtherInfo WHEN '' THEN [] WHEN NULL THEN [] ELSE [ur.FurtherInfo] END, links:universityLinks.values }, collegeRoute:{ requirements:collegeRequirement, requirementsPreface:cpr.skos__prefLabel, relevantSubjects: CASE cr.RelevantSubjects WHEN '' THEN [] WHEN NULL THEN [] ELSE [cr.RelevantSubjects] END, furtherInfo: CASE cr.FurtherInfo WHEN '' THEN [] WHEN NULL THEN [] ELSE [cr.FurtherInfo] END, links:collegeLinks.values }, apprenticeshipRoute:{ requirements:apprenticeshipRequirement, requirementsPreface:apr.skos__prefLabel, relevantSubjects:CASE ar.RelevantSubjects WHEN '' THEN [] WHEN NULL THEN [] ELSE [ar.RelevantSubjects] END, furtherInfo:CASE ar.FurtherInfo WHEN '' THEN [] WHEN NULL THEN [] ELSE [ar.FurtherInfo] END, links:apprenticeshipLinks.values }, workRoute:{ values:workRoute.values }, volunteeringRoute:{ values:volunteeringRoute.values }, directRoute:{ values:directRoute.values }, otherRoute:{ values:otherRoute.values }, requirementsAndRestrictions:{ otherRequirements:otherRequirements.values, restrictions:restrictions.values } , dayToDayTasks:dayToDayTasks, registration:registration.values } as combinedProfiles UNWIND combinedProfiles.lastModified as lastModifiedDatesAsRows WITH wu, we, wl, jp, soc, oc, combinedProfiles, lastModifiedDatesAsRows RETURN { Title:combinedProfiles.title, LastUpdatedDate:MAX(lastModifiedDatesAsRows), Url:$apiHost + 'getjobprofilebytitle/execute/' + jp.JobProfileWebsiteUrl, Soc:soc.skos__prefLabel, ONetOccupationalCode:'ToDo', AlternativeTitle:REDUCE(s = HEAD(oc.skos__altLabel), n IN TAIL( oc.skos__altLabel) | s + ', ' + n), Overview:jp.Description, SalaryStarter:jp.SalaryStarter, SalaryExperienced:jp.SalaryExperienced, MinimumHours:jp.MinimumHours, MaximumHours:jp.MaximumHours, WorkingHoursDetails:jp.WorkingHoursDetails, WorkingPattern:jp.WorkingPattern, WorkingPatternDetails:jp.WorkingPatternDetails, HowToBecome: { EntryRouteSummary:'ToDo', EntryRoutes: { University: { RelevantSubjects:COALESCE(combinedProfiles.universityRoute.relevantSubjects,[]), FurtherInformation:COALESCE(combinedProfiles.universityRoute.furtherInfo,[]), EntryRequirementPreface:combinedProfiles.universityRoute.requirementsPreface, EntryRequirements:COALESCE(combinedProfiles.universityRoute.requirements.values,[]), AdditionalInformation:COALESCE(combinedProfiles.universityRoute.links,[]) }, College: { RelevantSubjects:COALESCE(combinedProfiles.collegeRoute.relevantSubjects,[]), FurtherInformation:COALESCE(combinedProfiles.collegeRoute.furtherInfo,[]), EntryRequirementPreface:combinedProfiles.collegeRoute.requirementsPreface, EntryRequirements:COALESCE(combinedProfiles.collegeRoute.requirements.values,[]), AdditionalInformation:COALESCE(combinedProfiles.collegeRoute.links,[]) }, Apprenticeship: { RelevantSubjects:COALESCE(combinedProfiles.apprenticeshipRoute.relevantSubjects,[]), FurtherInformation:COALESCE(combinedProfiles.apprenticeshipRoute.furtherInfo,[]), EntryRequirementPreface:combinedProfiles.apprenticeshipRoute.requirementsPreface, EntryRequirements:COALESCE(combinedProfiles.apprenticeshipRoute.requirements.values,[]), AdditionalInformation:COALESCE(combinedProfiles.apprenticeshipRoute.links,[]) }, Work:combinedProfiles.workRoute.values, Volunteering:combinedProfiles.volunteeringRoute.values, DirectApplication:combinedProfiles.directRoute.values, OtherRoutes:combinedProfiles.otherRoute.values }, MoreInformation: { Registrations:COALESCE(combinedProfiles.registration,[]), CareerTips:CASE jp.HtbCareerTips WHEN '' THEN [] ELSE [jp.HtbCareerTips] END, ProfessionalAndIndustryBodies:CASE jp.HtbBodies WHEN '' THEN [] ELSE [jp.HtbBodies] END, FurtherInformation:CASE jp.HtbFurtherInformation WHEN '' THEN [] ELSE [jp.HtbFurtherInformation] END } }, WhatItTakes: { DigitalSkillsLevel:jp.WitDigitalSkillsLevel, Skills:['ToDo'], RestrictionsAndRequirements: { RelatedRestrictions: combinedProfiles.requirementsAndRestrictions.restrictions, OtherRequirements: combinedProfiles.requirementsAndRestrictions.otherRequirements } }, WhatYouWillDo: { WYDDayToDayTasks:[REDUCE(s = HEAD(combinedProfiles.dayToDayTasks.tasks), n IN TAIL(combinedProfiles.dayToDayTasks.tasks) | s + '; ' + n)], WorkingEnvironment: { Location:COALESCE(wl.skos_prefLabel, ''), Environment:COALESCE(we.skos_prefLabel, ''), Uniform:COALESCE(wu.skos_prefLabel, '') } }, CareerPathAndProgression: { CareerPathAndProgression:[jp.CareerPathAndProgression] }, RelatedCareers:['ToDo'] }",
  "queryParams": [
    {
      "name": "canonicalName",
      "pathOrdinalPosition": 0
    }
  ]
}