{
  "query": "MATCH (jp:ncs__JobProfile{skos__prefLabel:$canonicalName})-[:ncs__hasSocCode]->(soc:ncs__SOCCode), (jp)-[:ncs__relatedOccupation]-(oc:esco__Occupation) OPTIONAL MATCH (dtd:ncs__DayToDayTask)<-[:ncs__hasDayToDayTask]-(jp) WITH jp,soc,oc,{tasks:collect(dtd.skos__prefLabel)} as dayToDayTasks OPTIONAL MATCH (jp)-[:ncs__hasWorkingUniform]-(wu:ncs__WorkingUniform) OPTIONAL MATCH (jp)-[:ncs__hasWorkingEnvironment]-(we:ncs__WorkingEnvironment) OPTIONAL MATCH (jp)-[:ncs__hasWorkingLocation]-(wl:ncs__WorkingLocation) OPTIONAL MATCH (jp)-[:ncs__hasHtbUniversityRoute]-(ur:ncs__UniversityRoute)-[:ncs__hasUniversityRequirement]-(urq:ncs__UniversityRequirement), (ur)-[:ncs__hasRequirementsPrefix]-(upr:ncs__RequirementsPrefix) WITH wu,we,wl,jp,soc,oc,ur,upr,dayToDayTasks, {values:collect(urq.ncs__Description)} as universityRequirement OPTIONAL MATCH (ur)-[:ncs__hasUniversityLink]-(ul:ncs__UniversityLink) with wu,we,wl,jp,soc,oc,ur,upr,dayToDayTasks,universityRequirement,{values:collect('[' + ul.skos__prefLabel + ' | ' + ul.uri + ']')} as universityLinks WITH wu,we,wl,jp,soc,oc,ur,upr,dayToDayTasks,universityRequirement, universityLinks { lastModified:[jp.ncs__ModifiedDate, we.ncs__ModifiedDate, oc.ncs__ModifiedDate, wl.ncs__ModifiedDate, wu.ncs__ModifiedDate], title: jp.skos__prefLabel, universityRoute:{ requirements:universityRequirement, requirementsPreface:upr.ncs__Description, relevantSubjects:ur.ncs__RelevantSubjects, furtherInfo:ur.ncs__FurtherInfo, links:universityLinks }, dayToDayTasks:dayToDayTasks } as combinedProfiles UNWIND combinedProfiles.lastModified as lastModifiedDatesAsRows WITH wu, we, wl, jp, soc, oc, combinedProfiles, lastModifiedDatesAsRows RETURN { Title:combinedProfiles.title, LastUpdatedDate:MAX(lastModifiedDatesAsRows), Url:jp.ncs__JobProfileWebsiteUrl, Soc:soc.skos__prefLabel, ONetOccupationalCode:'ToDo', AlternativeTitle:REDUCE(s = HEAD(oc.skos__altLabel), n IN TAIL( oc.skos__altLabel) | s + ', ' + n), Overview:jp.ncs__Description, SalaryStarter:jp.ncs__SalaryStarter, SalaryExperienced:jp.ncs__SalaryExperienced, MinimumHours:jp.ncs__MinimumHours, MaximumHours:jp.ncs__MaximumHours, WorkingHoursDetails:jp.ncs__WorkingHoursDetails, WorkingPattern:jp.ncs__WorkingPattern, WorkingPatternDetails:jp.ncs__WorkingPatternDetails, HowToBecome: { EntryRouteSummary:'ToDo', EntryRoutes: { University: { RelevantSubjects:[combinedProfiles.universityRoute.relevantSubjects], FurtherInformation:[combinedProfiles.universityRoute.furtherInfo], EntryRequirementPreface:combinedProfiles.universityRoute.requirementsPreface, EntryRequirements:combinedProfiles.universityRoute.requirements.values, AdditionalInformation:combinedProfiles.universityRoute.links } }, MoreInformation: { Registration:['ToDo'], CareerTips:[jp.ncs__HtbCareerTips], ProfessionalAndIndustryBodies:[jp.ncs__HtbBodies], FurtherInformation:[jp.ncs__HtbFurtherInformation] } }, WhatItTakes: { DigitalSkillsLevel:jp.ncs__WitDigitalSkillsLevel, Skills:['ToDo'] }, WhatYouWillDo: { WYDDayToDayTasks:combinedProfiles.dayToDayTasks.tasks, WorkingEnvironment: { Location:COALESCE(wl.ncs__Description, ''), Environment:COALESCE(we.ncs__Description, ''), Uniform:COALESCE(wu.ncs__Description, '') } }, CareerPathAndProgression: { CareerPathAndProgression:[jp.ncs__CareerPathAndProgression] }, RelatedCareers:['ToDo'] }",
  "queryParams": [
    {
      "name": "canonicalName",
      "pathOrdinalPosition": 0
    }
  ]
}